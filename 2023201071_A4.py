# -*- coding: utf-8 -*-
"""Untitled24.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tY0n1lxH3oAiTxfKahXxbc6zn8j6ZrhU
"""

import numpy as np
import pandas as pd
import torch
import torch.nn as nn
import torch.optim as optim
import torchvision
import torchvision.models as models
import torch.utils.data
from torchvision.transforms import Compose, Resize, CenterCrop, ToTensor, Normalize
from tqdm import tqdm
from PIL import Image
from sklearn.metrics import mean_absolute_error
from glob import glob
from os.path import join
from pathlib import Path
import matplotlib.pyplot as plt
from torchvision.models import efficientnet_b4



class AgeDataset(torch.utils.data.Dataset):

    def __init__(self, data_path, annot_path, train=True):
        self.annot_path = annot_path
        self.data_path = data_path
        self.train = train

        self.ann = pd.read_csv(annot_path)
        self.files = self.ann['file_id']
        if train:
            self.ages = self.ann['age']
        self.transform = self._transform(224)


    @staticmethod
    def _convert_image_to_rgb(image):
        return image.convert("RGB")


    def _transform(self, n_px):
        return Compose([
            Resize((n_px, n_px)),
            self._convert_image_to_rgb,
            ToTensor(),
            Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
        ])


    def read_img(self, file_name):
        im_path = join(self.data_path, file_name)
        img = Image.open(im_path)
        img = self.transform(img)
        return img


    def __getitem__(self, index):
        file_name = self.files[index]
        img = self.read_img(file_name)
        if self.train:
            age = self.ages[index]
            return img, age
        else:
            return img


    def __len__(self):
        return len(self.files)


train_path = '/kaggle/input/smai-24-age-prediction/content/faces_dataset/train'
train_ann = '/kaggle/input/smai-24-age-prediction/content/faces_dataset/train.csv'
train_dataset = AgeDataset(train_path, train_ann, train=True)

test_path = '/kaggle/input/smai-24-age-prediction/content/faces_dataset/test'
test_ann = '/kaggle/input/smai-24-age-prediction/content/faces_dataset/submission.csv'
test_dataset = AgeDataset(test_path, test_ann, train=False)


train_loader = torch.utils.data.DataLoader(train_dataset, batch_size=64, shuffle=True)
test_loader = torch.utils.data.DataLoader(test_dataset, batch_size=64, shuffle=False)


class AgePredictionModel(nn.Module):
    def __init__(self, num_classes=1):
        super(AgePredictionModel, self).__init__()
        self.base_model = efficientnet_b4(pretrained=True)

        self.base_model.classifier = nn.Sequential(
            nn.Dropout(p=0.1),
            nn.Linear(in_features=self.base_model.classifier[1].in_features, out_features=num_classes)
        )

    def forward(self, x):
        return self.base_model(x)


def initialize_model():
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    model = AgePredictionModel()
    model = model.to(device)
    return model, device

model, device = initialize_model()



criterion = nn.L1Loss()
optimizer = optim.Adam(model.parameters(), lr=0.001)
# optimizer = optim.SGD(model.parameters(), lr=0.001, momentum=0.9,weight_decay=0.001)


def train_model(train_loader, model, criterion, optimizer, num_epochs=30):
    model.train()
    for epoch in range(num_epochs):
        running_loss = 0.0
        for images, ages in tqdm(train_loader):
            images = images.to(device)
            ages = ages.to(device).float()


            outputs = model(images)
            loss = criterion(outputs.view(-1), ages)


            optimizer.zero_grad()
            loss.backward()
            optimizer.step()

            running_loss += loss.item() * images.size(0)

        epoch_loss = running_loss / len(train_loader.dataset)
        print(f'Epoch {epoch+1}/{num_epochs}, Loss: {epoch_loss:.4f}')


@torch.no_grad()
def predict(loader, model):
    model.eval()
    predictions = []
    for images in tqdm(loader):
        images = images.to(device)
        outputs = model(images)
        predictions.extend(outputs.view(-1).cpu().detach().tolist())
    return predictions


train_model(train_loader, model, criterion, optimizer)


preds = predict(test_loader, model)


submit = pd.read_csv(test_ann)
submit['age'] = preds
submit.to_csv('submission.csv', index=False)

